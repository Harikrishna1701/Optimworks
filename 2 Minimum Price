
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

class FoodItem {
    String restaurantId;
    String[] foodItems; // Assuming food items are stored in an array
    double price;

    public FoodItem(String restaurantId, String[] foodItems, double price) {
        this.restaurantId = restaurantId;
        this.foodItems = foodItems;
        this.price = price;
    }
}

public class MinimumPriceFinder {

    public static void main(String[] args) {
        String filePath = "C:\\Users\\Sahith\\OneDrive\\Documents\\data.csv"; // Update path to your CSV file
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter food items separated by spaces: ");
        String userInput = scanner.nextLine();
        
        String result = findMinimumPrice(filePath, userInput);
        System.out.println(result);
    }

    public static String findMinimumPrice(String filePath, String foodItemsInput) {
        // Load the CSV file into a list of FoodItem objects
        List<FoodItem> foodItemsList = loadCsv(filePath);

        // Split the input food items into a list
        String[] foodItems = foodItemsInput.split(" ");

        // Initialize variables to track the minimum price and corresponding restaurant ID
        double minPrice = Double.MAX_VALUE;
        String bestRestaurantId = null;

        // Create a dictionary to track food item prices by restaurant
        Map<String, List<FoodItem>> restaurantFoodPrices = new HashMap<>();

        // Iterate through each FoodItem in the list
        for (FoodItem foodItem : foodItemsList) {
            String restaurantId = foodItem.restaurantId;

            // Initialize if the restaurant is not in the dictionary
            restaurantFoodPrices.putIfAbsent(restaurantId, new ArrayList<>());
            restaurantFoodPrices.get(restaurantId).add(foodItem);
        }

        // Now, check which restaurants have the requested food items
        for (Map.Entry<String, List<FoodItem>> entry : restaurantFoodPrices.entrySet()) {
            String restaurantId = entry.getKey();
            List<FoodItem> items = entry.getValue();
            List<Double> totalPrices = new ArrayList<>(); // List to hold possible total prices

            // Check for same row prices
            for (FoodItem item : items) {
                Set<String> foundItems = new HashSet<>();
                double rowPrice = 0;

                for (String foodItem : item.foodItems) {
                    if (Arrays.asList(foodItems).contains(foodItem)) {
                        foundItems.add(foodItem);
                        rowPrice += item.price;
                    }
                }

                // If all requested food items are found in this row, add to total prices
                if (foundItems.containsAll(Arrays.asList(foodItems))) {
                    totalPrices.add(rowPrice);
                }
            }

            // Check for different rows prices
            Map<String, List<FoodItem>> foodItemIndices = new HashMap<>();
            for (String item : foodItems) {
                foodItemIndices.put(item, new ArrayList<>());
            }

            // Populate the indices for each food item
            for (FoodItem foodItem : items) {
                for (String item : foodItems) {
                    if (Arrays.asList(foodItem.foodItems).contains(item)) {
                        foodItemIndices.get(item).add(foodItem);
                    }
                }
            }

            // Now create combinations of prices
            if (foodItems.length > 1) {
                for (List<FoodItem> combination : cartesianProduct(foodItemIndices.values())) {
                    // Check if the combination is from the same restaurant
                    Set<String> restaurantIds = new HashSet<>();
                    double totalPrice = 0;

                    for (FoodItem foodItem : combination) {
                        restaurantIds.add(foodItem.restaurantId);
                        totalPrice += foodItem.price;
                    }

                    if (restaurantIds.size() == 1) { // All items from the same restaurant
                        totalPrices.add(totalPrice);
                    }
                }
            }

            // Find the minimum price for this restaurant if there are any valid total prices
            if (!totalPrices.isEmpty()) {
                double minRestaurantPrice = Collections.min(totalPrices);
                if (minRestaurantPrice < minPrice) {
                    minPrice = minRestaurantPrice;
                    bestRestaurantId = restaurantId;
                }
            }
        }

        // Output the result
        if (bestRestaurantId != null) {
            return bestRestaurantId + ", " + String.format("%.2f", minPrice);
        } else {
            return "No matching restaurant found";
        }
    }

    private static List<FoodItem> loadCsv(String filePath) {
        List<FoodItem> foodItems = new ArrayList<>();
        String line;
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            br.readLine(); // Skip header line
            while ((line = br.readLine()) != null) {
                String[] values = line.split(","); // Assuming CSV is comma-separated
                String restaurantId = values[0];
                double price = Double.parseDouble(values[1].trim()); // Read price from the second column
                String[] foodItemsArray = Arrays.copyOfRange(values, 2, values.length); // Get food items
                foodItems.add(new FoodItem(restaurantId, foodItemsArray, price));
            }
        } catch (IOException e) {
            System.err.println("Error reading the CSV file: " + e.getMessage());
        } catch (NumberFormatException e) {
            System.err.println("Error parsing a number in the CSV file: " + e.getMessage());
        }
        return foodItems;
    }

    private static List<List<FoodItem>> cartesianProduct(Collection<List<FoodItem>> lists) {
        List<List<FoodItem>> result = new ArrayList<>();
        result.add(new ArrayList<>()); // Start with an empty list

        for (List<FoodItem> list : lists) {
            List<List<FoodItem>> newResult = new ArrayList<>();
            for (List<FoodItem> current : result) {
                for (FoodItem item : list) {
                    List<FoodItem> newCombination = new ArrayList<>(current);
                    newCombination.add(item);
                    newResult.add(newCombination);
                }
            }
            result = newResult;
        }

        return result;
    }
}
